#!/usr/bin/env python3
"""
Test script for enhanced Arctic agents with LLM-based decision making
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(__file__))

from arctic_agents import GameState, ChineseAgent, RussianAgent
from game_engine import ArcticWargameEngine

async def test_enhanced_agents():
    """Test the enhanced agents with LLM decision making"""
    print("🧪 Testing Enhanced Arctic Agents with LLM Decision Making")
    print("=" * 60)
    
    # Create a test game state
    game_state = GameState(
        turn=5,
        tension_level=6,
        recent_events=[
            "US deploys Arctic missile defense in Alaska",
            "Russia increases naval patrols in Arctic waters",
            "China announces new Arctic research station"
        ],
        adversary_reactions=[
            "Russia warns of escalation due to US military buildup",
            "China calls for peaceful Arctic cooperation"
        ]
    )
    
    print(f"📊 Test Game State:")
    print(f"Turn: {game_state.turn}")
    print(f"Tension: {game_state.tension_level}/10")
    print(f"China Resources: Military={game_state.china_resources['military']}, Economic={game_state.china_resources['economic']}, Political={game_state.china_resources['political']}, Information={game_state.china_resources['information']}")
    print(f"Russia Resources: Military={game_state.russia_resources['military']}, Economic={game_state.russia_resources['economic']}, Political={game_state.russia_resources['political']}, Information={game_state.russia_resources['information']}")
    print()
    
    # Test Chinese agent fallback (without LLM)
    print("🇨🇳 Testing Chinese Agent (Fallback Mode)")
    chinese_agent = ChineseAgent(None)  # No model client
    chinese_action = await chinese_agent._decide_action(game_state)
    
    if chinese_action:
        print(f"✅ Chinese Action: {chinese_action.action_name}")
        print(f"   Type: {chinese_action.action_type.value}")
        print(f"   Target: {chinese_action.target}")
        print(f"   Description: {chinese_action.description}")
        print(f"   Cost: {chinese_action.cost}")
    else:
        print("❌ No action generated by Chinese agent")
    print()
    
    # Test Russian agent fallback (without LLM)
    print("🇷🇺 Testing Russian Agent (Fallback Mode)")  
    russian_agent = RussianAgent(None)  # No model client
    russian_action = await russian_agent._decide_action(game_state)
    
    if russian_action:
        print(f"✅ Russian Action: {russian_action.action_name}")
        print(f"   Type: {russian_action.action_type.value}")
        print(f"   Target: {russian_action.target}")
        print(f"   Description: {russian_action.description}")
        print(f"   Cost: {russian_action.cost}")
    else:
        print("❌ No action generated by Russian agent")
    print()
    
    # Test full game engine integration
    print("🎮 Testing Game Engine Integration")
    engine = ArcticWargameEngine()
    await engine.initialize()
    await engine.start_game()
    
    # Simulate one turn
    result = await engine.execute_turn()
    print(f"Turn result: {result}")
    
    current_state = engine.get_game_state()
    if current_state:
        print(f"Current turn: {current_state.turn}")
        print(f"Current tension: {current_state.tension_level}/10")
        print("Recent events:")
        for event in current_state.recent_events[-3:]:
            print(f"  • {event}")
    
    await engine.shutdown()
    print()
    print("✅ Enhanced agents test completed!")

if __name__ == "__main__":
    asyncio.run(test_enhanced_agents())